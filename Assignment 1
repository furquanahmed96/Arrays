#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

vector<int> sum(vector<int>& nums, int target) {
    unordered_map<int, int> map;

    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];

        if (map.find(complement) != map.end()) {
            return {map[complement], i};
        }

        map[nums[i]] = i;
    }

    return {};
}

int main() {
    // #1
    vector<int> num1 = {2, 7, 11, 15};
    int target1 = 9;
    vector<int> result1 = sum(num1, target1);
    cout << "Example 1 Output: [" << result1[0] << ", " << result1[1] << "]"<<endl;

    // #2
    vector<int> num2 = {3, 2, 4};
    int target2 = 6;
    vector<int> result2 = sum(num2, target2);
    cout << "Example 2 Output: [" << result2[0] << ", " << result2[1] << "]"<<endl;

    // #3
    vector<int> num3 = {3, 3};
    int target3 = 6;
    vector<int> result3 = sum(num3, target3);
    cout << "Example 3 Output: [" << result3[0] << ", " << result3[1] << "]"<<endl;

    return 0;
}
